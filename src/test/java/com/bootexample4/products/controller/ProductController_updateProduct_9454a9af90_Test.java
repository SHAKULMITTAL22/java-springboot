// Test generated by RoostGPT for test uploadfilespringboot using AI Type Vertex AI and AI Model code-bison

package com.bootexample4.products.controller;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
@AutoConfigureMockMvc
public class ProductController_updateProduct_9454a9af90_Test {

    @Autowired
    private ProductController productController;

    @MockBean
    private ProductRepository productRepository;

    @Test
    public void testUpdateProduct_whenProductExists() {
        // given
        Long id = 1L;
        Product product = new Product();
        when(productRepository.findById(id)).thenReturn(Optional.of(product));

        // when
        ResponseEntity<Product> responseEntity = productController.updateProduct(id, product);

        // then
        assertEquals(200, responseEntity.getStatusCodeValue());
        assertEquals(product, responseEntity.getBody());
    }

    @Test
    public void testUpdateProduct_whenProductDoesNotExist() {
        // given
        Long id = 1L;
        Product product = new Product();
        when(productRepository.findById(id)).thenReturn(Optional.empty());

        // when
        ResponseEntity<Product> responseEntity = productController.updateProduct(id, product);

        // then
        assertEquals(404, responseEntity.getStatusCodeValue());
    }
}
