// ********RoostGPT********
/*
Test generated by RoostGPT for test api-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

Test generated for /login_post for http method type POST in rest-assured framework

RoostTestHash=3122292ee3


*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.in;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.matchesPattern;

public class loginPostTest {
    private List<Map<String, String>> envList;

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        String[] envVarsList = {""};
        envList = dataloader.load("src/test/java/com/bootexample4/RoostTest/loginPostTest.csv", envVarsList);
    }

    @Test
    public void loginPost_Test() {
        setUp();
        int testNumber = 1;
        for (Map<String, String> testData : envList) {
            RestAssured.baseURI = (testData.get("BASE_URL")!= null &&!testData.get("BASE_URL").isEmpty())? testData.get("BASE_URL") : "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0";

            Response responseObj = given()
                   .contentType(ContentType.JSON)
                   .body("{\n" +
                            "  \"email\": \"" + (testData.get("email")!= null? testData.get("email") : "") + "\",\n" +
                            "  \"otp\": \"" + (testData.get("otp")!= null? testData.get("otp") : "") + "\",\n" +
                            "  \"client\": \"" + (testData.get("client")!= null? testData.get("client") : "") + "\n" +
                            "}")
                   .when()
                   .post("/login")
                   .then()
                   .extract().response();

            JsonPath response = responseObj.jsonPath();
            String contentType = responseObj.getContentType();

            System.out.printf("Test Case %d: loginPost_Test \n", testNumber++);
            System.out.println("Request: POST /login");
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.get("statusCode")!= null) {
                MatcherAssert.assertThat(responseObj.statusCode(),
                        equalTo(Integer.parseInt(testData.get("statusCode"))));
            } else {
                List<Integer> expectedStatusCodes = Arrays.asList(201, 400);
                MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
            }

            switch (responseObj.statusCode()) {
                case 201:
                    validateSuccessResponse(response);
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                case 404:
                    validateNotFoundResponse(response);
                    break;
                case 422:
                    validateUnprocessableEntityResponse(response);
                    break;
            }
        }
    }

    private void validateSuccessResponse(JsonPath response) {
        System.out.println("Description: successful operation");

        if (response.get("token")!= null) {
            MatcherAssert.assertThat(response.getString("token"), matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));

            MatcherAssert.assertThat(response.get("token"), instanceOf(String.class));
        }
    }

    private void validateErrorResponse(JsonPath response) {
        System.out.println("Description: Bad Request");

        if (response.get("error")!= null) {
            MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));
        }

        if (response.get("description")!= null) {
            MatcherAssert.assertThat(response.get("description"), instanceOf(String.class));
        }

        if (response.get("value")!= null) {
            MatcherAssert.assertThat(response.get("value"), instanceOf(undefined.class));
        }

        if (response.get("field")!= null) {
            MatcherAssert.assertThat(response.get("field"), instanceOf(String.class));
        }

        if (response.get("schema_field")!= null) {
            MatcherAssert.assertThat(response.get("schema_field"), instanceOf(String.class));
        }
    }

    private void validateNotFoundResponse(JsonPath response) {
        // Add specific assertions for HTTP status code 404
    }

    private void validateUnprocessableEntityResponse(JsonPath response) {
        // Add specific assertions for HTTP status code 422
    }
}
