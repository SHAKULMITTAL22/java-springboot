# ********RoostGPT********

# Test generated by RoostGPT for test API-test-Vtal using AI Type Open AI and AI Model gpt-4o
# 
# Test generated for /appointment/{appointmentId}_patch for http method type PATCH in artillery framework
# RoostTestHash=33f5f2e325
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 5
  payload:
    path: "appointment_appointmentId_patch_success.csv"
    skipHeader: true
    fields:
      - appointmentId
      - slotId
      - reason
    delimiter: "^|^"
  plugins:
    expect: {}

scenarios:
  - name: Validate successful API responses for Patch Appointment
    flow:
      - log: "Starting Patch Appointment request"
      - patch:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Content-Type: application/json
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            appointment:
              slot:
                id: "{{ slotId }}"
              reason: "{{ reason }}"
          expect:
            statusCode: 200
            json:
              order:
                hasProperty1: type
                hasProperty2: associatedDocument
                hasProperty3: addressChange
              customer:
                hasProperty: subscriberId
              appointment:
                hasProperty: id
                hasProperty: startDate
                hasProperty: finishDate
                hasProperty: priority
              address:
                hasProperty: id
              products:
                hasProperty: product
              control:
                hasProperty: type
                hasProperty: message
                hasProperty: code
      - think: 2
      - log: "Starting another Patch Appointment request"
      - patch:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Content-Type: application/json
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            appointment:
              slot:
                id: "{{ slotId }}"
              reason: "{{ reason }}"
          expect:
            statusCode: 200
            json:
              order:
                hasProperty1: type
                hasProperty2: associatedDocument
                hasProperty3: addressChange
              customer:
                hasProperty: subscriberId
              appointment:
                hasProperty: id
                hasProperty: startDate
                hasProperty: finishDate
                hasProperty: priority
              address:
                hasProperty: id
              products:
                hasProperty: product
              control:
                hasProperty: type
                hasProperty: message
                hasProperty: code
      - think: 2
