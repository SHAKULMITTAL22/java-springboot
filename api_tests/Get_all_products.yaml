// Test generated by RoostGPT for test integrationtest-0408 using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

config:
  target: "$processEnvironment.SERVER_URL"
  phases:
    - duration: 60
      arrivalRate: 20

scenarios:
  - name: Successful API request
    scenario: Get all products when no products exist
    flow:
      - get:
          url: "/products"
          expect:
            - statusCode: 200
            - hasProperty: "name"
            - contentType: "application/json"
            - schema:
              type: "array"
              items:
                $ref: "#/components/schemas/Product"

  - name: API request with validation failure
    scenario: Get all products when some products exist
    flow:
      - get:
          url: "/products"
          headers:
            Content-Type: "application/json"
          json:
            name: ""
            description: "description of the product"
            price: 20
          expect:
            - statusCode: 400
            - hasProperty: "error"
            - contentType: "application/json"
            - schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  example: "apple"
                description:
                  type: "string"
                  example: "description of the product"
                price:
                  type: "integer"
                  format: "int64"
                  example: 20

  - name: API request with edge case
    scenario: Get all products when some products exist with special characters
    flow:
      - get:
          url: "/products"
          headers:
            Content-Type: "application/json"
          json:
            name: "@#$%^&*()"
            description: "description of the product"
            price: 9999999999999999999
          expect:
            - statusCode: 200
            - hasProperty: "name"
            - contentType: "application/json"
            - schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  example: "apple"
                description:
                  type: "string"
                  example: "description of the product"
                price:
                  type: "integer"
                  format: "int64"
                  example: 20
